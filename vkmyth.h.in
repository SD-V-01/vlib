////////////////////////////////////////////////////////////////////////////
//
//  VLib Source File.
//  Copyright (C) 2024 S/N: V-01
// -------------------------------------------------------------------------
//  File name:   vkmyth.h
//  Version:     v1.00
//  Created:     29/07/24 by V.
//  Description: 
// -------------------------------------------------------------------------
//  This project is licensed under the MIT License
//
////////////////////////////////////////////////////////////////////////////

#ifndef MYTH_VK_LOADER_H
#define MYTH_VK_LOADER_H

#if defined(VULKAN_H_) && !defined(VK_NO_PROTOTYPES)
#error Please define VK_NO_PROTOTYPES to prevent vulkan.h from defining function definitions

#endif

#if !defined(VULKAN_H_) && defined(MYTH_VK_LOAD_VULKAN_H_CUSTOM_PATH)
#include MYTH_VK_LOAD_VULKAN_H_CUSTOM_PATH
#elif !defined(VULKAN_H_) && !defined(MYTH_VK_LOAD_VULKAN_H_CUSTOM_PATH) && defined(VK_USE_PLATFORM_WIN32_KHR)
#include "vulkan/vk_platform.h"
#include "vulkan/vulkan_core.h"

typedef unsigned long DWORD;
typedef const wchar_t* LPCWSTR;
typedef void* HANDLE;
typedef struct HINSTANCE__* HINSTANCE;
typedef struct HWND__* HWND;
typedef struct HMONITOR__* HMONITOR;
typedef struct _SECURITY_ATTRIBUTES SECURITY_ATTRIBUTES;

#include "vulkan/vulkan_win32.h"

#ifdef VK_ENABLE_BETA_EXTENSIONS
#include "vulkan/vulkan_beta.h"
#endif

#elif !defined(VULKAN_H_) && !defined(MYTH_VK_LOAD_VULKAN_H_CUSTOM_PATH) && !defined(VK_USR_PLATFORM_WIN32_KHR)
#ifndef VK_NO_PROTOTYPES
#define VK_NO_PROTOTYPES
#endif
#include "vulkan/vulkan.h"

#endif

#if defined(_WIN32)
#define MYTH_VK_LOAD_DLL "vulkan-1.dll"
#define MYTH_VK_LOAD_DLL_BACKUP "vulkan-1.dll"


#elif defined(__linux__) || defined(__unix__)
#define MYTH_VK_LOAD_DLL "libvulkan.so.1"
#define MYTH_VK_LOAD_DLL_BACKUP "libvulkan.so"

#elif defined(__APPLE__)
#error We don't do that around here

#else
#error Define platform

#endif

#define MYTH_VK_LOAD_API

#ifdef __cplusplus
extern "C"{
#endif

typedef struct _mythVkDeviceFuncArray mythVkDeviceFuncArray;

MYTH_VK_LOAD_API VkResult mythVkLoad();
MYTH_VK_LOAD_API void mythVkExit();
MYTH_VK_LOAD_API uint32_t mythVkGetInstanceVer();
MYTH_VK_LOAD_API void mythVkLoadInstance(VkInstance Instance);
MYTH_VK_LOAD_API void mythVkLoadDevice(VkDevice Device);
MYTH_VK_LOAD_API void mythVkLoadArrayDevice(mythVkDeviceFuncArray* FuncArray, VkDevice Device);
MYTH_VK_LOAD_API void _mythVkLoadBasic(VkInstance Instance, PFN_vkGetInstanceProcAddr LoadFunc);
MYTH_VK_LOAD_API void _mythVkLoadInstance(VkInstance Instance, PFN_vkGetInstanceProcAddr LoadFunc);
MYTH_VK_LOAD_API void _mythVkLoadDevice(VkDevice Device, PFN_vkGetDeviceProcAddr LoadFunc);
MYTH_VK_LOAD_API void _mythVkLoadArrayDevice(mythVkDeviceFuncArray* FuncArray, VkDevice Device, PFN_vkGetDeviceProcAddr LoadFunc);

//SECTION(V): VTOSTR8_PROTO

//SECTION(V): VTOSTR32_PROTO

struct _mythVkDeviceFuncArray{

#if defined(TENX_PARSER) || defined(IDE_PARSER)

//SECTION(V): TENX_PARSER_DEVICE_FUNC_ARRAY

#else

//SECTION(V): VK_DEVICE_FUNC_ARRAY

#endif

};


#if defined(TENX_PARSER) || defined(IDE_PARSER)

//SECTION(V): TENX_PARSER_PROTOTYPES

#else

//SECTION(V): VK_PROTOTYPES_HEADER

#endif

#ifdef __cplusplus
}
#endif

#endif 
